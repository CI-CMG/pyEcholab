# coding=utf-8
u'''
Created on Mar 27, 2013

@author: zachary.berkowitz
'''
import numpy as np

def haversin(x):
    '''
    haversine(x) = sin(x/2)^2
    
    x is in radians
    '''
    
    return np.sin(x/2)**2

def archaversin(x):
    '''
    inverse haversine
    
    archarversine(x) = 2 * arcsin(sqrt(x))
    '''
    
    return 2 * np.arcsin(np.sqrt(x))


def gps_distance(lat0, lon0, lat1, lon1, r=6356.78):
    '''
    Calculates the distance between two gps coordinates using the haversine
    formula.  Uses the value 'r' for the radius of the Earth (in km).
    
    haversin(d/r) = haversin(lat1 - lat0) + cos(lat0)*cos(lat1)*haversin(lon1-lon0)
    
    so
    
    d = r * archaversin(RHS)
    
    :returns: distance (in meters)
    '''
    
    r_m = r * 1e3
    
    PI_DIV_180 = np.pi/180
    lat0_r = lat0 * PI_DIV_180
    lat1_r = lat1 * PI_DIV_180
    lon0_r = lon0 * PI_DIV_180
    lon1_r = lon1 * PI_DIV_180
    
    RHS = haversin(lat1_r - lat0_r) + np.cos(lat0_r)*np.cos(lat1_r)*haversin(lon1_r-lon0_r)
    
    d = r_m * archaversin(RHS)
    
    return d